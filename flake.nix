{
  description = "NixOS system configuration with clustering support";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-24.11";
    flake-parts.url = "github:hercules-ci/flake-parts";
    divnix-std.url = "github:divnix/std";
    home-manager.url = "github:nix-community/home-manager";
    git-hooks-nix = {
      inputs.nixpkgs.follows = "nixpkgs";
      url = "github:cachix/git-hooks.nix";
    };
  };

  outputs = inputs @ {flake-parts, ...}:
    flake-parts.lib.mkFlake {inherit inputs;} {
      systems = [
        "x86_64-linux"
        "aarch64-linux"
        "aarch64-darwin"
        "x86_64-darwin"
      ];

      imports = [
        ./modules/base-system.nix
        ./modules/impermanence.nix
        ./modules/home-config.nix
        inputs.git-hooks-nix.flakeModule
      ];

      perSystem = {
        config,
        pkgs,
        ...
      }: {
        pre-commit.settings = {
          hooks = {
            #NOTE: Check https://github.com/cachix/git-hooks.nix for more hooks
            alejandra.enable = true;
            flake-checker.enable = true;
            nil.enable = true;
            statix.enable = true;
            deadnix.enable = true;
            editorconfig-checker.enable = true;
            #gitlint.enable = true; #FIXME: Uncomment when using descriptive multiline string in git commit msg body instead of subject single line commit desc.
            prettier.enable = true;
            trim-trailing-whitespace.enable = true;
            tagref.enable = true;
            detect-private-keys.enable = true;
            #reuse.enable = true; #FIXME: Uncomment when license management is needed to the project
            #gptcommit.enable = true; #TODO: Fork and add support for VeniceAI and openAI API compatible format to get on the fly commit messages generated by AI

            # Language Linters
            #cmake-format.enable = true; #FIXME: Uncomment when cmake is added to the project
            #clang-tidy.enable = true; #FIXME: Uncomment when clang is added to the project
            #clang-format.enable = true; #FIXME: Uncomment when clang is added to the project
            #hadolint.enable = true; #FIXME: Uncomment when docker is added to the project
            #html-tidy.enable = true; #FIXME: Uncomment when html is added to the project
            #eslint.enable = true; #FIXME: Uncomment when javascript is added to the project
            #markdownlint.enable = true; #FIXME: Uncomment when markdown is added to the project
            #lychee.enable = true; #FIXME: Uncomment when links are added to the project and need to be checked for validity
            #check-json.enable = true; #FIXME: Uncomment when json is added to the project
            #pretty-format-json.enable = true; #FIXME: Uncomment when json is added to the project
            #chktex.enable = true; #FIXME: Uncomment when latex is added to the project
            #poetry-check.enable = true; #FIXME: Uncomment when poetry is added to the project
            #poetry-lock.enable = true; #FIXME: Uncomment when poetry is added to the project
            #sort-requirements-txt.enable = true; #FIXME: Uncomment when python/poetry is added to the project
            #ruff.enable = true; #FIXME: Uncomment when python is added to the project
            #shellcheck.enable = true; #FIXME: Uncomment when shell is added to the project
            #shfmt.enable = true; #FIXME: Uncomment when shell is added to the project
            #bats.enable = true; #FIXME: Uncomment when shell is added to the project
            #beautysh.enable = true; #FIXME: Uncomment when shell is added to the project
            #trufflehog.enable = true; #FIXME: Uncomment when secrets are added to the project
            #check-toml.enable = true; #FIXME: Uncomment when toml is added to the project
            #vale.enable = true; #FIXME: Uncomment when spelling needs to be checked
            #actionlint.enable = true; #FIXME: Uncomment when github actions are added to the project
            #openapi-spec-validator.enable = true; #FIXME: Uncomment when openapi-spec is added to the project

            #TODO: Replace any compatible language linters with Trunk Code Quality which containts over 150 language formatters
          };
          src = ./.;
        };

        devShells.default = pkgs.mkShell {
          nativeBuildInputs = with pkgs; [
            wget
            alejandra
            shfmt
            statix
            deadnix
          ];
          shellHook = ''
            ${config.pre-commit.installationScript}
            echo 1>&2 "Welcome to the development shell!"
          '';
        };

        devShells.fish = pkgs.mkShell {
          nativeBuildInputs = with pkgs; [
            curl
            fish
            just
          ];
        };
      };

      flake = {
        nixosConfigurations = {};

        clusterConfig = inputs.flake-parts.lib.makeModule {
          imports = [./clusters];
        };

        nodeRoles = {
          workstation = ./roles/workstation.nix;
          server = ./roles/server.nix;
          edge = ./roles/edge.nix;
        };

        cloudProviders = {
          oci = ./providers/oracle.nix;
          lxd = ./providers/lxd.nix;
        };
      };
    };
}
